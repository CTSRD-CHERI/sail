let translate_out_big_bit = function
  | (name, Bvector _, bits) -> IInt.integer_of_bit_list bits
  | _ -> assert false

let translate_out_int inst = (Nat_big_num.to_int (translate_out_big_bit inst))
let translate_out_signed_int inst bits = 
    let i = (Nat_big_num.to_int (translate_out_big_bit inst)) in
    if (i >= (1 lsl (bits - 1))) then
    (i - (1 lsl bits)) else
    i

let translate_out_ireg ireg = IReg (int_to_ireg (translate_out_int ireg))

let translate_out_imm26 imm = translate_out_int imm

let translate_out_imm16 imm = translate_out_int imm
let translate_out_simm16 imm = translate_out_signed_int imm 16

let translate_out_imm5 imm = translate_out_int imm

let translate_out_bool = function
  | (name, Bit, [Bitc_one])  -> true
  | (name, Bit, [Bitc_zero]) -> false
  | _ -> assert false

let translate_out_enum (name,_,bits) =
    Nat_big_num.to_int (IInt.integer_of_bit_list bits)

let translate_out_wordWidth inst = 
    match translate_out_enum inst with
    | 0 -> MIPSByte
    | 1 -> MIPSHalf
    | 2 -> MIPSWord
    | 3 -> MIPSDouble
    | _ -> failwith "Unknown wordWidth in sail translate out"

let translate_out_cmp inst = 
    match translate_out_enum inst with
    | 0 -> MIPS_EQ  (* equal *)
    | 1 -> MIPS_NE  (* not equal *)
    | 2 -> MIPS_GE  (* signed greater than or equal *)
    | 3 -> MIPS_GEU (* unsigned greater than or equal *) 
    | 4 -> MIPS_GT  (* signed strictly greater than *) 
    | 5 -> MIPS_LE  (* signed less than or equal *) 
    | 6 -> MIPS_LT  (* signed strictly less than *) 
    | 7 -> MIPS_LTU (* unsigned less than or qual *) 
    | _ -> failwith "Unknown mipsCmp in sail translate out"
